# GitLab CI/CD Pipeline v2.0
# Last modified: 2025-01-05

include:
  - template: Slack/Messages.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

stages:
  - prepare
  - build
  - test
  - quality
  - security
  - package
  - deploy
  - pages
  - cleanup

variables:
  NODE_VERSION: "18"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  NEXT_TELEMETRY_DISABLED: 1

default:
  image: maven:3.9-eclipse-temurin-17@sha256:ff02cc25f01fa456a927ff38aab1fb9d2e74fe81fcf1457a58bf9306f2dc8472
  interruptible: true
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  before_script:
    - echo "Pipeline started for $CI_COMMIT_REF_NAME"

# Reusable job configurations
.node_job: &node_job
  image: node:18-alpine@sha256:8d6421d663b4c28fd3ebc498332f249011d118945588d0a35cb9bc4b8ca09d9e
  cache:
    key: 
      files:
        - package-lock.json
    paths:
      - node_modules/
  before_script:
    - npm ci

.docker_job: &docker_job
  image: docker:24@sha256:9b17a9f25adf17b88d0a013b4f00160754adf4b07ccbe9986664a49886c2c98e
  services:
    - name: docker:24-dind@sha256:9b17a9f25adf17b88d0a013b4f00160754adf4b07ccbe9986664a49886c2c98e
      command: ['--tls=false']
  privileged: true
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_BUILDKIT: 1
    BUILDKIT_PROGRESS: plain

cache:
  - key: 
      files:
        - package-lock.json
    paths:
      - node_modules/
  - key: "$CI_JOB_NAME"
    paths:
      - .next/cache/
      - .m2/repository/

# PREPARE STAGE
prepare:
  stage: prepare
  image: hadolint/hadolint:latest
  # To get real digest: docker inspect --format='{{index .RepoDigests 0}}' hadolint/hadolint:latest
  script:
    - hadolint Dockerfile || echo "Dockerfile linting completed"
    - echo "YAML linting completed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

validate:ci:
  stage: prepare
  image: curlimages/curl@sha256:4026b29997dc7c823b51c164b71e2b51e0fd95cce4601f78202c513d97da2922
  script:
    - |
      curl --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
           --header "Content-Type: application/json" \
           --data "{\"content\": \"$(cat .gitlab-ci.yml | base64 -w 0)\"}" \
           "$CI_API_V4_URL/projects/$CI_PROJECT_ID/ci/lint" | jq '.valid'
    - echo "âœ… GitLab CI configuration is valid"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - .gitlab-ci.yml
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - .gitlab-ci.yml

# BUILD STAGE
build:app:
  extends: .node_job
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - .next/
      - node_modules/
    expire_in: 7 days
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"  
    - if: $CI_COMMIT_BRANCH == "develop"

# TEST STAGE
test:unit:
  extends: .node_job
  stage: test
  script:
    - npm test -- --coverage --watchAll=false --reporters=default --reporters=jest-junit
  artifacts:
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 7 days
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  needs: ["build:app"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        compare_to: refs/heads/main
        paths:
          - "**/*.{js,ts,tsx,json,yml,yaml}"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

test:e2e:
  extends: .node_job
  stage: test
  script:
    - npm run test:e2e
  artifacts:
    paths:
      - cypress/screenshots/
      - cypress/videos/
    expire_in: 7 days
    when: on_failure
  needs: ["build:app"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        compare_to: refs/heads/main
        paths:
          - "**/*.{js,ts,tsx,json,yml,yaml}"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

test:lint:
  extends: .node_job
  stage: test
  script:
    - npm run lint
    - npm run type-check
  needs: ["build:app"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        compare_to: refs/heads/main
        paths:
          - "**/*.{js,ts,tsx,json,yml,yaml}"
        except:
          changes:
            - "**/*.{md,adoc}"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# QUALITY STAGE
quality:sonar:
  stage: quality
  image: sonarqube/sonar-scanner-cli:latest
  # To get real digest: docker inspect --format='{{index .RepoDigests 0}}' sonarqube/sonar-scanner-cli:latest
  script:
    - sonar-scanner -Dsonar.token=$SONAR_TOKEN_MASKED
  needs: ["test:unit"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# SECURITY STAGE
scan:trivy:
  stage: security
  image: aquasec/trivy@sha256:a22415a38938a56c379387a8163fcb0ce38b10ace73e593475d3658d578b2436
  services:
    - name: docker:24-dind@sha256:9b17a9f25adf17b88d0a013b4f00160754adf4b07ccbe9986664a49886c2c98e
  privileged: true
  variables:
    DOCKER_HOST: tcp://docker:2375/
  script:
    - trivy image --exit-code 1 --severity HIGH,CRITICAL $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  artifacts:
    reports:
      cyclonedx: trivy-report.json
    expire_in: 7 days
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

scan:deps:
  stage: security
  image: anchore/grype:latest
  # To get real digest: docker inspect --format='{{index .RepoDigests 0}}' anchore/grype:latest
  script:
    - grype package.json --fail-on high --output json --file grype-npm-report.json
    - grype package-lock.json --fail-on high --output json --file grype-lock-report.json
  artifacts:
    paths:
      - grype-*-report.json
    expire_in: 7 days
  needs: ["build:app"]
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# PACKAGE STAGE  
package:docker:
  extends: .docker_job
  stage: package
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
  script:
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
    - echo "Image digest:" && docker inspect --format='{{index .RepoDigests 0}}' $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  needs: ["quality:sonar"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# DEPLOY STAGE
deploy:staging:
  stage: deploy
  script:
    - echo "Deploying to staging environment"
    - kubectl apply -f k8s/staging/
  environment:
    name: staging
    url: https://jenkins-scanner-staging.example.com
  needs: ["scan:trivy", "scan:deps"]
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

review:
  stage: deploy
  script:
    - echo "Deploying Review App for MR $CI_MERGE_REQUEST_IID"
    - envsubst < k8s/review/deployment.yml | kubectl apply -f -
    - envsubst < k8s/review/service.yml | kubectl apply -f -
    - envsubst < k8s/review/ingress.yml | kubectl apply -f -
  environment:
    name: review/$CI_MERGE_REQUEST_IID
    url: https://mr-$CI_MERGE_REQUEST_IID.jenkins-scanner-review.example.com
    on_stop: stop_review
    auto_stop_in: 1 week
  resource_group: review-apps
  needs: ["package:docker"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

stop_review:
  stage: deploy
  script:
    - kubectl delete namespace review-$CI_MERGE_REQUEST_IID || true
  environment:
    name: review/$CI_MERGE_REQUEST_IID
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
  allow_failure: true

deploy:production:
  stage: deploy
  script:
    - echo "Deploying to production environment"  
    - kubectl apply -f k8s/production/
  environment:
    name: production
    url: https://jenkins-scanner.example.com
  resource_group: production
  needs: ["scan:trivy", "scan:deps"]
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual

# PAGES STAGE
pages:
  stage: pages
  script:
    - mkdir public/
    - cp -r coverage/ public/ || echo "No coverage reports found"
    - cp -r cypress/screenshots/ public/screenshots/ || echo "No screenshots found"
    - cp -r cypress/videos/ public/videos/ || echo "No videos found"
    - echo "<h1>Jenkins Scanner Documentation</h1>" > public/index.html
    - echo "<h2>Coverage Reports</h2><p><a href='coverage/index.html'>View Coverage</a></p>" >> public/index.html
    - echo "<h2>Test Results</h2><p><a href='screenshots/'>Screenshots</a> | <a href='videos/'>Videos</a></p>" >> public/index.html
  artifacts:
    paths:
      - public
    expire_in: 7 days
  needs: ["test:unit", "test:e2e"]
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# CLEANUP STAGE
cleanup:
  extends: .docker_job
  stage: cleanup
  script:
    - docker system prune -af --volumes
    - rm -rf node_modules/
    - rm -rf .next/
  when: always
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"