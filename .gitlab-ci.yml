# GitLab CI/CD Configuration
# Generated by Jenkins-to-GitLab AI Migration System

stages:
  - checkout
  - build  
  - test
  - static-analysis
  - docker-build
  - publish
  - deploy
  - e2e

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  SLACK_CH: "#ci-results"
  COMMIT_HASH: "${CI_COMMIT_SHORT_SHA}"
  IMG_TAG: "${DOCKER_TAG:-$COMMIT_HASH}"
  
  # Credentials mapped from Jenkins credentials-binding (confidence: 0.95)
  DOCKER_REG: $CI_REGISTRY
  REGISTRY_USER: $CI_REGISTRY_USER
  REGISTRY_PASS: $CI_REGISTRY_PASSWORD
  SONAR_TOKEN: $SONAR_TOKEN
  ARTIFACTORY_RT: $ARTIFACTORY_RT
  KUBECONFIG_CRED: $KUBECONFIG_CRED

# Tools (mapped from Jenkins tools block)
default:
  image: maven:3.9-eclipse-temurin-17
  cache:
    paths:
      - .m2/repository/
      - node_modules/
  before_script:
    - export JAVA_HOME=/opt/java/openjdk
    - export PATH=$JAVA_HOME/bin:$PATH
    - npm install -g npm@8

# Parameters (mapped from Jenkins parameters)
include:
  - local: '/.gitlab/variables.yml'

# Options (mapped from Jenkins options)
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH || $CI_COMMIT_TAG'
      when: always
    - when: never

# Checkout stage  
checkout:
  stage: checkout
  image: alpine/git
  rules:
    - when: always
  script:
    - git checkout $CI_COMMIT_REF_NAME
    - echo "Setting build display name to #$CI_PIPELINE_ID $COMMIT_HASH"
  tags:
    - linux-medium
  artifacts:
    paths:
      - ./*
    expire_in: 1 day
  timeout: 5m

# Build & Unit Tests (matrix build for Java 17/21 and MySQL/Postgres)
build_compile:
  stage: build
  parallel:
    matrix:
      - LANG: ["java17", "java21"]  
        DB: ["mysql", "postgres"]
  script:
    - mvn -B -P${LANG} clean compile
  tags:
    - docker
  artifacts:
    paths:
      - target/*
    expire_in: 1 day
  timeout: 10m

unit_tests:
  stage: test
  parallel:
    matrix:
      - LANG: ["java17", "java21"]
        DB: ["mysql", "postgres"]
  script:
    - mvn -B -P${LANG} test
  artifacts:
    reports:
      junit: "**/target/surefire-reports/*.xml"
    paths:
      - target/*
    expire_in: 1 day
  tags:
    - docker
  timeout: 15m

stash_artifacts:
  stage: test
  rules:
    - if: '$DB == "mysql" && $LANG == "java17"'
      when: always
    - when: never
  script:
    - echo "Stashing artifacts for java17-mysql"
  artifacts:
    paths:
      - target/*
    name: "jar-java17-mysql"
    expire_in: 1 week
  tags:
    - docker
  timeout: 5m

# Static Analysis (parallel SonarQube + ESLint)
sonarqube:
  stage: static-analysis
  image: maven:3.9-eclipse-temurin-17
  script:
    - mvn -B verify sonar:sonar -Dsonar.login=$SONAR_TOKEN
  tags:
    - docker
  timeout: 15m

eslint:
  stage: static-analysis  
  image: node:18-alpine
  script:
    - npm ci
    - npm run eslint
  tags:
    - docker
  timeout: 8m

# Docker Build & Push
docker_build_push:
  stage: docker-build
  image: docker:24
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS $DOCKER_REG
    - docker build -t $DOCKER_REG/jenkins-scanner:$IMG_TAG .
    - docker push $DOCKER_REG/jenkins-scanner:$IMG_TAG
    - docker push $DOCKER_REG/jenkins-scanner:latest
    - docker inspect $DOCKER_REG/jenkins-scanner:$IMG_TAG --format '{{.Id}}' > image_digest.txt
  artifacts:
    paths:
      - image_digest.txt  
    expire_in: 1 day
  tags:
    - docker-privileged
  timeout: 15m

# Publish Artifacts to Artifactory
publish_artifacts:
  stage: publish
  image: curlimages/curl
  needs:
    - job: stash_artifacts
      artifacts: true
  script:
    - |
      curl -u $ARTIFACTORY_RT \
        -T "target/*.jar" \
        "https://artifactory.example.com/libs-release-local/com/example/jenkins-scanner/$IMG_TAG/"
  tags:
    - linux-small
  timeout: 10m

# Deploy to Kubernetes
deploy_k8s:
  stage: deploy
  image: bitnami/kubectl:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG'
      when: always
    - when: never
  script:
    - export KUBECONFIG=$KUBECONFIG_CRED
    - kubectl set image deployment/jenkins-scanner jenkins-scanner=$DOCKER_REG/jenkins-scanner:$IMG_TAG -n $ENV
    - kubectl rollout status deployment/jenkins-scanner -n $ENV
  tags:
    - linux-kubectl
  timeout: 10m

# End-to-End Tests
e2e_tests:
  stage: e2e
  image: cypress/included:12.17.1
  rules:
    - if: '$RUN_E2E == "true"'
      when: always
    - when: never
  script:
    - cypress run --record
  artifacts:
    paths:
      - cypress/videos/**
    expire_in: 1 week
  tags:
    - docker
  timeout: 15m

# Post-build Notifications  
success_notification:
  stage: .post
  image: curlimages/curl
  rules:
    - if: '$CI_PIPELINE_STATUS == "success"'
      when: always
    - when: never
  script:
    - |
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\": \"✅ ${CI_PROJECT_NAME} #${CI_PIPELINE_ID} (${COMMIT_HASH}) succeeded on ${ENV}\"}" \
        $SLACK_WEBHOOK_URL
  tags:
    - linux-small
  timeout: 5m

failure_notification:
  stage: .post
  image: curlimages/curl
  rules:
    - if: '$CI_PIPELINE_STATUS == "failed"'  
      when: always
    - when: never
  script:
    - |
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\": \"❌ ${CI_PROJECT_NAME} #${CI_PIPELINE_ID} failed (<${CI_PIPELINE_URL}|details>)\"}" \
        $SLACK_WEBHOOK_URL
  tags:
    - linux-small
  timeout: 5m

# Clean workspace 
cleanup:
  stage: .post
  image: alpine
  script:
    - rm -rf ./*
  tags:
    - linux-small
  timeout: 5m