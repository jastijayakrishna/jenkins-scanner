pipeline {
    agent any
    
    properties {
        parameters {
            string(name: 'DEPLOY_ENV', defaultValue: 'staging', description: 'Target deployment environment')
            booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Execute test suite')
            choice(name: 'BUILD_TYPE', choices: ['Debug', 'Release', 'Profile'], description: 'Build configuration type')
            text(name: 'RELEASE_NOTES', defaultValue: '', description: 'Release notes for this build')
        }
        buildDiscarder(logRotator(numToKeepStr: '20', daysToKeepStr: '30'))
    }
    
    environment {
        APP_NAME = 'microservice-app'
        VERSION = '2.1.0'
        DOCKER_REGISTRY = 'docker.company.com'
        SONAR_HOST_URL = "${env.SONAR_URL}"
        NOTIFICATION_CHANNEL = '#ci-cd'
    }
    
    options {
        timeout(time: 45, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10'))
        skipDefaultCheckout(false)
    }
    
    stages {
        stage('Checkout & Setup') {
            steps {
                checkout scm
                sh('echo "Setting up build environment..."')
                sh('chmod +x ./scripts/setup.sh && ./scripts/setup.sh')
            }
        }
        
        stage('Build Matrix') {
            matrix {
                axes {
                    axis {
                        name 'JAVA_VERSION'
                        values '11', '17', '21'
                    }
                    axis {
                        name 'OS_TYPE'
                        values 'ubuntu', 'alpine'
                    }
                }
                excludes {
                    exclude {
                        axis {
                            name 'JAVA_VERSION'
                            values '11'
                        }
                        axis {
                            name 'OS_TYPE'  
                            values 'alpine'
                        }
                    }
                }
                stages {
                    stage('Compile') {
                        steps {
                            timeout(time: 15, unit: 'MINUTES') {
                                withMaven(maven: 'maven-3', jdk: "jdk-${JAVA_VERSION}") {
                                    sh('mvn clean compile -DskipTests')
                                }
                            }
                        }
                    }
                    
                    stage('Unit Tests') {
                        when {
                            expression { params.RUN_TESTS == true }
                        }
                        steps {
                            sh('mvn test -Dtest=*UnitTest')
                            junit(testResults: '**/target/surefire-reports/*.xml', allowEmptyResults: true)
                            publishTestResults(testResultsPattern: 'target/surefire-reports/*.xml')
                        }
                        post {
                            always {
                                publishHTML([
                                    allowMissing: false,
                                    alwaysLinkToLastBuild: true,
                                    keepAll: true,
                                    reportDir: 'target/site/jacoco',
                                    reportFiles: 'index.html',
                                    reportName: 'Coverage Report'
                                ])
                            }
                        }
                    }
                }
            }
        }
        
        stage('Quality & Security') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        withSonarQubeEnv('SonarQube') {
                            sh('mvn sonar:sonar -Dsonar.projectKey=${APP_NAME}')
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: true
                        }
                    }
                }
                
                stage('Security Scanning') {
                    steps {
                        sh('trivy fs --exit-code 1 --severity HIGH,CRITICAL .')
                        dependencyCheck additionalArguments: '--format ALL --suppression dependency-check-suppressions.xml', odcInstallation: 'Default'
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'target',
                            reportFiles: 'dependency-check-report.html',
                            reportName: 'OWASP Dependency Check'
                        ])
                    }
                }
                
                stage('License Check') {
                    steps {
                        sh('mvn license:check')
                        archiveArtifacts(artifacts: 'target/license-check-report.xml', fingerprint: true)
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                script {
                    docker.image('postgres:13').withRun('-e POSTGRES_PASSWORD=test') { c ->
                        docker.image('redis:6-alpine').withRun() { redis ->
                            sh('mvn verify -Dtest=*IntegrationTest -Dspring.profiles.active=integration')
                        }
                    }
                }
                junit('**/target/failsafe-reports/*.xml')
            }
        }
        
        stage('Package & Build Images') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'docker-registry', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS'),
                    string(credentialsId: 'signing-key', variable: 'SIGNING_KEY')
                ]) {
                    sh('echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY')
                    
                    script {
                        def image = docker.build("${DOCKER_REGISTRY}/${APP_NAME}:${BUILD_NUMBER}")
                        image.push()
                        image.push("${VERSION}-${BUILD_NUMBER}")
                        image.push("latest")
                    }
                    
                    sh('docker logout $DOCKER_REGISTRY')
                }
                
                // Package JAR with signing
                sh('mvn package -DskipTests -Dgpg.passphrase=${SIGNING_KEY}')
                archiveArtifacts(artifacts: 'target/*.jar,target/*.war', fingerprint: true)
            }
        }
        
        stage('Deploy to Staging') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    expression { params.DEPLOY_ENV == 'staging' }
                }
            }
            steps {
                withCredentials([
                    file(credentialsId: 'kubeconfig-staging', variable: 'KUBECONFIG'),
                    string(credentialsId: 'helm-repo-user', variable: 'HELM_USER'),
                    string(credentialsId: 'helm-repo-pass', variable: 'HELM_PASS')
                ]) {
                    sh('helm repo add company-charts https://charts.company.com --username $HELM_USER --password $HELM_PASS')
                    sh('helm repo update')
                    
                    retry(3) {
                        sh("""
                            helm upgrade --install ${APP_NAME}-staging company-charts/microservice \\
                                --set image.repository=${DOCKER_REGISTRY}/${APP_NAME} \\
                                --set image.tag=${BUILD_NUMBER} \\
                                --set environment=staging \\
                                --namespace staging \\
                                --create-namespace \\
                                --wait --timeout=10m
                        """)
                    }
                }
                
                // Health check
                script {
                    def healthCheckUrl = "https://staging.company.com/${APP_NAME}/health"
                    retry(5) {
                        sleep(30)
                        sh("curl -f ${healthCheckUrl} || exit 1")
                    }
                }
            }
        }
        
        stage('Smoke Tests') {
            when {
                expression { params.DEPLOY_ENV != 'production' }
            }
            steps {
                sh('npm install newman')
                sh('newman run tests/postman/smoke-tests.json --environment tests/postman/staging.json')
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true, 
                    keepAll: true,
                    reportDir: 'newman',
                    reportFiles: 'newman-run-report.html',
                    reportName: 'API Smoke Tests'
                ])
            }
        }
        
        stage('Performance Tests') {
            when {
                anyOf {
                    branch 'main'
                    expression { params.BUILD_TYPE == 'Release' }
                }
            }
            steps {
                sh('jmeter -n -t tests/performance/load-test.jmx -l results/load-test-results.jtl')
                perfReport(
                    sourceDataFiles: 'results/load-test-results.jtl',
                    compareBuildPrevious: true,
                    modePerformancePerTestCase: true
                )
            }
        }
        
        stage('Production Deployment Approval') {
            when {
                allOf {
                    branch 'main'
                    expression { params.DEPLOY_ENV == 'production' }
                }
            }
            steps {
                script {
                    def deploymentApproved = input(
                        message: 'Deploy to Production?',
                        parameters: [
                            choice(name: 'APPROVE', choices: ['No', 'Yes'], description: 'Approve production deployment?'),
                            text(name: 'DEPLOYMENT_NOTES', defaultValue: '', description: 'Deployment notes')
                        ]
                    )
                    
                    if (deploymentApproved.APPROVE != 'Yes') {
                        error('Production deployment not approved')
                    }
                    
                    env.DEPLOYMENT_NOTES = deploymentApproved.DEPLOYMENT_NOTES
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                allOf {
                    branch 'main'
                    expression { params.DEPLOY_ENV == 'production' }
                }
            }
            steps {
                withVault(
                    configuration: [timeout: 60, vaultUrl: 'https://vault.company.com'],
                    vaultSecrets: [
                        [path: 'secret/k8s/prod', secretValues: [
                            [vaultKey: 'kubeconfig', envVar: 'KUBE_CONFIG_CONTENT'],
                            [vaultKey: 'registry-token', envVar: 'REGISTRY_TOKEN']
                        ]]
                    ]
                ) {
                    sh('echo "$KUBE_CONFIG_CONTENT" | base64 -d > ~/.kube/config')
                    
                    script {
                        // Blue-Green Deployment
                        def currentColor = sh(
                            script: "kubectl get service ${APP_NAME}-prod -o jsonpath='{.spec.selector.color}' || echo 'blue'",
                            returnStdout: true
                        ).trim()
                        
                        def newColor = currentColor == 'blue' ? 'green' : 'blue'
                        
                        echo "Current production color: ${currentColor}, deploying to: ${newColor}"
                        
                        sh("""
                            helm upgrade --install ${APP_NAME}-${newColor} company-charts/microservice \\
                                --set image.repository=${DOCKER_REGISTRY}/${APP_NAME} \\
                                --set image.tag=${BUILD_NUMBER} \\
                                --set environment=production \\
                                --set color=${newColor} \\
                                --namespace production \\
                                --wait --timeout=15m
                        """)
                        
                        // Switch traffic
                        sh("kubectl patch service ${APP_NAME}-prod -p '{\"spec\":{\"selector\":{\"color\":\"${newColor}\"}}}'")
                        
                        // Cleanup old deployment after delay
                        sleep(120)
                        sh("helm uninstall ${APP_NAME}-${currentColor} --namespace production || true")
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
            
            // Collect all test results
            publishTestResults(testResultsPattern: '**/target/*-reports/*.xml')
            
            // Archive important artifacts
            archiveArtifacts(
                artifacts: 'target/*.jar,target/site/**,newman/**,results/**',
                allowEmptyArchive: true,
                fingerprint: true
            )
            
            // Publish coverage reports
            publishHTML([
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'target/site/jacoco',
                reportFiles: 'index.html',
                reportName: 'Code Coverage'
            ])
        }
        
        success {
            slackSend(
                channel: env.NOTIFICATION_CHANNEL,
                color: 'good',
                message: """
                ✅ *BUILD SUCCESS* - ${env.JOB_NAME} #${env.BUILD_NUMBER}
                📋 Branch: ${env.BRANCH_NAME}
                🎯 Environment: ${params.DEPLOY_ENV}
                ⏱️ Duration: ${currentBuild.durationString}
                🔗 <${env.BUILD_URL}|View Build>
                
                📝 Release Notes: ${params.RELEASE_NOTES ?: 'No release notes provided'}
                """.stripIndent()
            )
            
            emailext(
                to: "${env.CHANGE_AUTHOR_EMAIL},devops@company.com",
                subject: "✅ Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """
                Build completed successfully!
                
                Project: ${env.JOB_NAME}
                Build: #${env.BUILD_NUMBER}
                Branch: ${env.BRANCH_NAME}
                Environment: ${params.DEPLOY_ENV}
                Duration: ${currentBuild.durationString}
                
                Build URL: ${env.BUILD_URL}
                
                Release Notes:
                ${params.RELEASE_NOTES ?: 'No release notes provided'}
                
                Best regards,
                Jenkins CI/CD
                """
            )
        }
        
        failure {
            slackSend(
                channel: env.NOTIFICATION_CHANNEL,
                color: 'danger',
                message: """
                ❌ *BUILD FAILED* - ${env.JOB_NAME} #${env.BUILD_NUMBER}
                📋 Branch: ${env.BRANCH_NAME} 
                ⏱️ Duration: ${currentBuild.durationString}
                🔗 <${env.BUILD_URL}|View Build>
                🔍 <${env.BUILD_URL}console|View Logs>
                
                Please check the build logs and fix the issues.
                """.stripIndent()
            )
            
            emailext(
                to: "${env.CHANGE_AUTHOR_EMAIL},devops@company.com",
                subject: "❌ Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """
                Build failed! Please check the logs and fix the issues.
                
                Project: ${env.JOB_NAME}
                Build: #${env.BUILD_NUMBER}
                Branch: ${env.BRANCH_NAME}
                Duration: ${currentBuild.durationString}
                
                Build URL: ${env.BUILD_URL}
                Console: ${env.BUILD_URL}console
                
                Please investigate and fix the issues as soon as possible.
                
                Jenkins CI/CD
                """
            )
        }
        
        unstable {
            slackSend(
                channel: env.NOTIFICATION_CHANNEL,
                color: 'warning',
                message: """
                ⚠️ *BUILD UNSTABLE* - ${env.JOB_NAME} #${env.BUILD_NUMBER}
                📋 Branch: ${env.BRANCH_NAME}
                ⏱️ Duration: ${currentBuild.durationString}
                🔗 <${env.BUILD_URL}|View Build>
                
                Tests may have failed or there are quality gate issues.
                """.stripIndent()
            )
        }
        
        aborted {
            slackSend(
                channel: env.NOTIFICATION_CHANNEL,
                color: '#808080',
                message: """
                ⏹️ *BUILD ABORTED* - ${env.JOB_NAME} #${env.BUILD_NUMBER}
                📋 Branch: ${env.BRANCH_NAME}
                ⏱️ Duration: ${currentBuild.durationString}
                
                Build was cancelled or timed out.
                """.stripIndent()
            )
        }
    }
}